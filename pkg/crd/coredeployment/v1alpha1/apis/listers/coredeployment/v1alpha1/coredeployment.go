/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/soniabha-intc/edgedeploy/pkg/crd/coredeployment/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CoreDeploymentLister helps list CoreDeployments.
// All objects returned here must be treated as read-only.
type CoreDeploymentLister interface {
	// List lists all CoreDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CoreDeployment, err error)
	// CoreDeployments returns an object that can list and get CoreDeployments.
	CoreDeployments(namespace string) CoreDeploymentNamespaceLister
	CoreDeploymentListerExpansion
}

// coreDeploymentLister implements the CoreDeploymentLister interface.
type coreDeploymentLister struct {
	indexer cache.Indexer
}

// NewCoreDeploymentLister returns a new CoreDeploymentLister.
func NewCoreDeploymentLister(indexer cache.Indexer) CoreDeploymentLister {
	return &coreDeploymentLister{indexer: indexer}
}

// List lists all CoreDeployments in the indexer.
func (s *coreDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.CoreDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CoreDeployment))
	})
	return ret, err
}

// CoreDeployments returns an object that can list and get CoreDeployments.
func (s *coreDeploymentLister) CoreDeployments(namespace string) CoreDeploymentNamespaceLister {
	return coreDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CoreDeploymentNamespaceLister helps list and get CoreDeployments.
// All objects returned here must be treated as read-only.
type CoreDeploymentNamespaceLister interface {
	// List lists all CoreDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CoreDeployment, err error)
	// Get retrieves the CoreDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CoreDeployment, error)
	CoreDeploymentNamespaceListerExpansion
}

// coreDeploymentNamespaceLister implements the CoreDeploymentNamespaceLister
// interface.
type coreDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CoreDeployments in the indexer for a given namespace.
func (s coreDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CoreDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CoreDeployment))
	})
	return ret, err
}

// Get retrieves the CoreDeployment from the indexer for a given namespace and name.
func (s coreDeploymentNamespaceLister) Get(name string) (*v1alpha1.CoreDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("coredeployment"), name)
	}
	return obj.(*v1alpha1.CoreDeployment), nil
}
