/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/soniabha-intc/edgedeploy/pkg/crd/appdeployment/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppDeploymentLister helps list AppDeployments.
// All objects returned here must be treated as read-only.
type AppDeploymentLister interface {
	// List lists all AppDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppDeployment, err error)
	// AppDeployments returns an object that can list and get AppDeployments.
	AppDeployments(namespace string) AppDeploymentNamespaceLister
	AppDeploymentListerExpansion
}

// appDeploymentLister implements the AppDeploymentLister interface.
type appDeploymentLister struct {
	indexer cache.Indexer
}

// NewAppDeploymentLister returns a new AppDeploymentLister.
func NewAppDeploymentLister(indexer cache.Indexer) AppDeploymentLister {
	return &appDeploymentLister{indexer: indexer}
}

// List lists all AppDeployments in the indexer.
func (s *appDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.AppDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppDeployment))
	})
	return ret, err
}

// AppDeployments returns an object that can list and get AppDeployments.
func (s *appDeploymentLister) AppDeployments(namespace string) AppDeploymentNamespaceLister {
	return appDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppDeploymentNamespaceLister helps list and get AppDeployments.
// All objects returned here must be treated as read-only.
type AppDeploymentNamespaceLister interface {
	// List lists all AppDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppDeployment, err error)
	// Get retrieves the AppDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppDeployment, error)
	AppDeploymentNamespaceListerExpansion
}

// appDeploymentNamespaceLister implements the AppDeploymentNamespaceLister
// interface.
type appDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppDeployments in the indexer for a given namespace.
func (s appDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppDeployment))
	})
	return ret, err
}

// Get retrieves the AppDeployment from the indexer for a given namespace and name.
func (s appDeploymentNamespaceLister) Get(name string) (*v1alpha1.AppDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appdeployment"), name)
	}
	return obj.(*v1alpha1.AppDeployment), nil
}
